#!/usr/bin/env bash
###############################################################################
# dock - macOS Dock Manager
# Minimal, predictable output. Dry-run shows the exact dockutil commands.
#
# Config (YAML):
#   apps:
#     - Google Chrome
#     - "Visual Studio Code"
#     - "System Settings"
#   downloads:           # omit -> classic + ~/Downloads + others
#     preset: classic    # classic | fan | list
#     path: "~/Downloads"
#     section: others    # apps-left | apps-right | others
#   # To disable: downloads: off
#
# Requirements (pre-installed): dockutil >= 3.0.0, yq >= 4.0.0
###############################################################################

set -euo pipefail
LC_ALL=C
VERSION="0.1.4"

DEBUG=${DEBUG:-0}
QUIET=0
log() { [[ $QUIET -eq 0 ]] && printf "%s\n" "$*"; }
warn() { printf "⚠ %s\n" "$*" >&2; }
die() {
	warn "$*"
	exit 1
}

trap 'warn "Error at line $LINENO: ${BASH_COMMAND:-?} (exit $?)"; exit 1' ERR

DRY_RUN=0
PROFILE=""
RESET_FILE=""
DOCK_CONFIG="${DOCK_CONFIG:-}"

parsed_apps=()
dl_enabled=1
dl_preset="classic"
dl_path="${HOME}/Downloads"
dl_section="others"

# Resolve real script directory, following symlinks (Homebrew installs via bin -> libexec).
resolve_script_dir() {
	local src="${BASH_SOURCE[0]}" dir
	while [[ -L "$src" ]]; do
		dir="$(cd -P -- "$(dirname "$src")" && pwd)"
		src="$(readlink "$src")"
		[[ "$src" != /* ]] && src="$dir/$src"
	done
	cd -P -- "$(dirname "$src")" && pwd
}

SCRIPT_DIR="$(resolve_script_dir)"
LIB_DIR="${SCRIPT_DIR}/lib"
[[ -d "$LIB_DIR" ]] || die "Unable to locate dock lib directory."
# shellcheck source=lib/version.sh
source "${LIB_DIR}/version.sh"
# shellcheck source=lib/env.sh
source "${LIB_DIR}/env.sh"
# shellcheck source=lib/string_utils.sh
source "${LIB_DIR}/string_utils.sh"
# shellcheck source=lib/config.sh
source "${LIB_DIR}/config.sh"
# shellcheck source=lib/dock_ops.sh
source "${LIB_DIR}/dock_ops.sh"
# shellcheck source=lib/snapshot.sh
source "${LIB_DIR}/snapshot.sh"

# ------------------------------- CLI -----------------------------------------
show_help() {
	cat <<'HELP'
dock - macOS Dock Manager

Usage:
  dock [--dry-run] [--file PATH] [--profile NAME] COMMAND

Commands:
  reset                 Reset Dock from a config file (or discovery)
  show                  Print current Dock app names (apps section)
  validate              Validate config and report any errors; no changes
  backup                Write current Dock as YAML config (requires --file)

Options (general):
  --dry-run             Show what would be done, without changes
  --file, -f PATH       Config file to use (reset/validate) or to write (backup)
  --profile NAME        Use ~/.config/dock/profiles/NAME.(yml|yaml) if --file not set
  -h, --help            Show this help
  --version             Print version

Dry-run format:
  • [DRY-RUN] Would reset Dock with apps: <list>; downloads: <preset>/<section> -> <path>
  [DRY-RUN] dockutil ...
HELP
}

run_reset_with_config() {
	local cf="$1"
	[[ -f "$cf" ]] || die "Config not found: $cf"
	# Validate strictly before applying
	validate_yaml_config "$cf"
	log "dock reset using config from $cf"
	load_yaml_config "$cf"
	build_plan "${parsed_apps[@]}"
	if [[ "$DRY_RUN" -eq 1 ]]; then
		printf "• [DRY-RUN] Would reset Dock with apps: %s; downloads: %s/%s -> %s\n" \
			"${parsed_apps[*]:-<none>}" "$dl_preset" "$dl_section" "$dl_path"
		print_plan
	else
		execute_plan
	fi
}

resolve_config_path() {
	local cf=""
	if [[ -n "$RESET_FILE" ]]; then
		cf="$RESET_FILE"
	elif [[ -n "$PROFILE" ]]; then
		local p
		for ext in yml yaml; do
			p="$HOME/.config/dock/profiles/${PROFILE}.${ext}"
			if [[ -f "$p" ]]; then
				cf="$p"
				break
			fi
		done
	elif config_path=$(find_config); then
		cf="$config_path"
	fi
	[[ -n "$cf" ]] || return 1
	printf "%s" "$cf"
}

main() {
	ensure_macos
	ensure_dockutil
	ensure_yq

	local cmd="" args=()
	while [[ $# -gt 0 ]]; do
		case "$1" in
		--dry-run)
			DRY_RUN=1
			shift
			;;
		-f | --file)
			RESET_FILE="$2"
			shift 2
			;;
		--profile)
			PROFILE="$2"
			shift 2
			;;
		--version)
			printf "dock %s\n" "$VERSION"
			exit 0
			;;
		-h | --help)
			show_help
			exit 0
			;;
		--*) die "Unknown option: $1" ;;
		*) if [[ -z "$cmd" ]]; then
			cmd="$1"
			shift
		else
			args+=("$1")
			shift
		fi ;;
		esac
	done

	if [[ -z "$cmd" ]]; then
		warn "No command provided."
		show_help
		exit 1
	fi

	case "$cmd" in
	show)
		dump_config
		;;
	validate)
		local cf=""
		if ! cf="$(resolve_config_path)"; then
			die "No config found for validate. Use --file PATH or set up discovery."
		fi
		if validate_yaml_config "$cf"; then
			printf "No errors were found in configuration file - %s\n" "$cf"
		else
			local count=${#VALIDATION_ERRORS[@]}
			if ((count == 1)); then
				printf "1 error was found in configuration file - %s\n" "$cf"
			else
				printf "%d errors were found in configuration file - %s\n" "$count" "$cf"
			fi
			local err
			for err in "${VALIDATION_ERRORS[@]}"; do
				printf "%s\n" "$err"
			done
			exit 1
		fi
		;;
	reset)
		local cf=""
		if ! cf="$(resolve_config_path)"; then
			die "No dock YAML config found. Use --file PATH or set up discovery."
		fi
		run_reset_with_config "$cf"
		;;
	backup)
		[[ -n "$RESET_FILE" ]] || die "backup requires --file PATH (where to write the YAML)"
		backup_to_file "$RESET_FILE"
		;;
	*)
		warn "Unknown command: $cmd"
		show_help
		exit 1
		;;
	esac
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
	main "$@"
fi
